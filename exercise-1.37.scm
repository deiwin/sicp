(define (rec-cont-frac n d k)
  (define (iter i)
    (if (> i k)
      (/ (n i) (d i))
      (/ (n i) (+ (d i) (iter (inc i))))))
  (iter 1))

(define (always n) (lambda (i) n))
(define (golden-ratio-approx k)
  (/ 1 (rec-cont-frac (always 1.0) (always 1.0) k)))

(define (approximate-to-precision f tolerance)
  (define (close-enough? v1 v2) (< (abs (- v1 v2)) tolerance))
  (define (try previous-value step)
    (let (( current-value (f step)))
      (if (close-enough? previous-value current-value)
        (list step current-value)
        (try current-value (inc step)))))
  (try (f 1) 2))
