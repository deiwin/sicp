(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

(define adjoin-set cons)

(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2))
         '())
        ((element-of-set? (car set1) set2)
         (cons (car set1)
               (intersection-set (cdr set1)
                                 set2)))
        (else (intersection-set (cdr set1)
                                set2))))

(define union-set append)

(and (equal? (adjoin-set 3 '(1 2 3))
             '(3 1 2 3))
     (equal? (intersection-set '(1 2 3) '(2 3 4))
             '(2 3))
     (equal? (union-set '(1 2 3) '(2 3 4))
             '(1 2 3 2 3 4)))
